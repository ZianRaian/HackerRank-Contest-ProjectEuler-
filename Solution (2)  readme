Sum of Even Fibonacci Numbers

Problem Statement

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first few terms will be:

1, 2, 3, 5, 8, 13, 21, 34, ...

By considering the terms in the Fibonacci sequence whose values do not exceed a given number , find the sum of the even-valued terms.

Input Format

The first line contains an integer , the number of test cases.

Each of the next  lines contains an integer .

Constraints





Output Format

For each test case, print an integer that denotes the sum of all even Fibonacci numbers up to .

Example

Input

2
10
100

Output

10
44

Solution Approach

Optimized Algorithm:

Only Even Fibonacci Numbers Matter:

Instead of computing all Fibonacci numbers, we generate only even Fibonacci numbers using the formula:


This avoids unnecessary calculations and speeds up execution.

Precompute Results:

We precompute even Fibonacci numbers up to the maximum  encountered in the input.

We store their prefix sums for quick lookup.

Efficient Query Handling:

Using binary search, we find the largest even Fibonacci number  and return its precomputed sum.



######## Solution ###########

import sys

def precompute_even_fib_sums(limit):
    even_fib = [2, 8]  # First two even Fibonacci numbers
    while True:
        next_even = 4 * even_fib[-1] + even_fib[-2]
        if next_even > limit:
            break
        even_fib.append(next_even)
    
    # Precompute prefix sums for fast queries
    prefix_sums = []
    current_sum = 0
    for num in even_fib:
        current_sum += num
        prefix_sums.append((num, current_sum))
    
    return prefix_sums

def find_even_fib_sum(n, precomputed_sums):
    left, right = 0, len(precomputed_sums) - 1
    while left <= right:
        mid = (left + right) // 2
        if precomputed_sums[mid][0] > n:
            right = mid - 1
        else:
            left = mid + 1
    return precomputed_sums[right][1] if right >= 0 else 0

def main():
    input_data = sys.stdin.read().split()
    T = int(input_data[0])
    queries = list(map(int, input_data[1:T+1]))
    max_n = max(queries)
    precomputed_sums = precompute_even_fib_sums(max_n)
    results = [str(find_even_fib_sum(n, precomputed_sums)) for n in queries]
    sys.stdout.write("\n".join(results) + "\n")

if __name__ == "__main__":
    main()
