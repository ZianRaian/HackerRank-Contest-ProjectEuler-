# Largest Prime Factor

## Problem Statement
Given an integer `N`, find the largest prime factor of `N`.

## Input Format
- The first line contains an integer `T`, the number of test cases.
- Each of the next `T` lines contains an integer `N`.

## Constraints
- `1 <= T <= 10`
- `10 <= N <= 10^{12}`

## Output Format
For each test case, print the largest prime factor of `N`.

## Example

### Input
```
2
10
17
```

### Output
```
5
17
```

## Solution Approach
### Optimized Algorithm:
1. **Remove Factors of `2` First:**
   - Continuously divide `N` by `2` to handle even numbers.
2. **Check Odd Factors from `3` to `sqrt(N)`:**
   - Iterate only over odd numbers to reduce computations.
3. **If `N` is Still Greater than `1`, It Must Be Prime:**
   - If after processing all smaller factors `N > 1`, then `N` itself is prime and is the largest prime factor.

## Code Implementation
```python
import sys
import math

def largest_prime_factor(n):
    while n % 2 == 0:
        max_prime = 2
        n //= 2
    
    for i in range(3, int(math.sqrt(n)) + 1, 2):
        while n % i == 0:
            max_prime = i
            n //= i
    
    if n > 1:
        max_prime = n
    
    return max_prime

if __name__ == "__main__":
    input_data = sys.stdin.read().splitlines()
    T = int(input_data[0])
    results = []
    
    for i in range(1, T + 1):
        N = int(input_data[i])
        results.append(str(largest_prime_factor(N)))
    
    print("\n".join(results))
```

## Steps to Run the Code
1. **Save the script as `largest_prime_factor.py`**.
2. **Run the script using Python:**
   ```sh
   python largest_prime_factor.py < input.txt
   ```
   where `input.txt` contains test cases.

```

## Conclusion
This solution efficiently calculates the largest prime factor for large constraints using **trial division and precomputation**, ensuring it runs within time limits. 
