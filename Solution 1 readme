# Sum of Multiples of 3 or 5 Below a Given Number

This project solves the problem of finding the sum of all multiples of 3 or 5 below a given number `n` for multiple test cases. It uses an optimized mathematical approach to compute the result efficiently, avoiding time limits and ensuring fast execution for large inputs.

## Problem Description

The problem is as follows:

- For each test case, you're given a number `n`. Your task is to calculate the sum of all multiples of 3 or 5 that are less than `n`.
  
  Example:
  
  - For `n = 10`, the multiples of 3 or 5 below 10 are `{3, 5, 6, 9}`, and their sum is `23`.
  - For `n = 100`, the multiples of 3 or 5 below 100 are `{3, 5, 6, 9, 10, 12, 15, ..., 99}`, and their sum is `2318`.

## Solution Approach

### Optimized Approach:
Instead of iterating over all numbers up to `n`, the solution uses the formula for the sum of multiples of a number. This is based on the arithmetic series sum formula:
\[
S(k) = k \times \frac{p \times (p + 1)}{2}
\]
Where `k` is the number whose multiples we're summing (either 3, 5, or 15), and `p` is the number of multiples of `k` below `n`.

- We calculate the sum of multiples of 3, sum of multiples of 5, and subtract the sum of multiples of 15 to avoid double-counting.

### Code

```python
def sum_of_multiples_below(n, k):
    # Calculate the sum of multiples of k below n
    p = (n - 1) // k  # the number of multiples of k below n
    return k * p * (p + 1) // 2

def sum_of_multiples(n):
    # Sum multiples of 3 or 5 below n
    sum_3 = sum_of_multiples_below(n, 3)
    sum_5 = sum_of_multiples_below(n, 5)
    sum_15 = sum_of_multiples_below(n, 15)  # avoid double-counting multiples of 15
    return sum_3 + sum_5 - sum_15

def main():
    # Reading the number of test cases
    t = int(input())
    
    # Reading the inputs for each test case
    for _ in range(t):
        n = int(input())
        # Output the result for each test case
        print(sum_of_multiples(n))

if __name__ == "__main__":
    main()
